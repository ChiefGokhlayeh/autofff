[autofff]

# Scanner type
#   options: gcc_header, gcc_object
#   default: gcc_header
scanner_type=gcc_header
# Generator type
#   options: bare, simple
#   default: simple
generator_type=simple

[[gcc.scanner]]

# Path to the C preprocessor to be used.
#   default: "cpp"
cpp_path="cpp"
# Additional args that should be passed to the C preprocessor (includes and
# defines are appended). By default these are used to mask gcc's built-in
# macros.
#   default: '-D__attribute__(x)=', '-D__asm__(x)=', '-D__const=', '-D__const__=', '-D__restrict=', '-D__restrict__=', '-D__extension__=', '-D__inline=', '-D__forcedinline=', '-D__inline__='
cpp_args='-D__attribute__(x)=', '-D__asm__(x)=', '-D__const=','-D__const__=', '-D__restrict=', '-D__restrict__=', '-D__extension__=', '-D__inline=', '-D__forcedinline=', '-D__inline__='

# Prefix used to pass directory includes to the C preprocessor.
#   default: "-I"
cpp_include_dir_prefix="-I"
# Prefix used to pass file includes to the C preprocessor.
#   default: "-include"
cpp_include_file_prefix=-"include"
# Prefix used to pass defines and macros to the C preprocessor.
#   default: "-D"
cpp_define_prefix="-D"

# RegEx pattern to exclude any code that is not C standard compliant and would
# therefore cause compiler errors when autofff tries to parse the preprocessor
# output. This primarily applies to assembler instructions.
#   default: "([\s\n]*(__asm|asm)[\s\n]*(volatile|[\s\n]*)(goto|[\s\n]*)(.|\n|;)*?;)"
non_standard_ignore_pattern="([\s\n]*(__asm|asm)[\s\n]*(volatile|[\s\n]*)(goto|[\s\n]*)(.|\n|;)*?;)"

# Number of lines before the faulty line that should be included in the error
# context if a parsing error occurs.
#   default: 5
#   min: 0
error_context_prev_lines=5
# Number of lines after the faulty line that should be included in the error
# context if a parsing error occurs.
#   default: 5
#   min: 0
error_context_post_lines=5

# Define used to tell the scanner which parts of the source-code to skip.
# This value will be passed down as a define to the gcc instance. By
# using #ifndef <ignore_annotation> in your source-code, you can tell the
# scanner to skip certain parts of your code-base.
#   default: "AUTOFFF_SCAN_IGNORE"
ignore_annotation="AUTOFFF_SCAN_IGNORE"

[[simple.generator]]

# Generate standard C include guard in test-header.
#   options: True, False
#   default: True
generate_include_guard=True

# Path to fff.h. Note: Supports OS environment variables using "$VAR" or "${VAR}".
#   default: "fff.h"
fff_path=fff.h
